blueprint:
  name: Motion Sensor with Sunset cutoffs
  description: Turn on a light when motion is detected On At Sunset. (v1.7)
  domain: automation
  input:
    motion_entity:
      name: Motion Sensor
      selector:
        entity:
          domain: binary_sensor
    ilum_entity:
      name: Light Binary Sensor (optional) 
      default: 
      selector:
        entity: 
          domain: binary_sensor
    lux_entity:
      name: Light Iluminance Sensor (optional)
      default:
      selector:
        entity: 
          domain: sensor
    lux_value:
      name: Needs to be under Lx value of light sensor (optional)
      default: 
      selector:
        number:
          min: 00
          max: 100
          mode: slider
          step: 1.0
          
    elevation_shift:
      name: Elevation Shift
      description: Using an elevation offset (height of sun relative to the horizon) to shift the sunset trigger, either earlier or later. Positive values bring the automation start time forward, whilst negative values delay the start time.
      default: 0.0
      # Use a selector, to set the time shift or offset
      selector:
        number:
          min: -20.0
          max: 20.0
          mode: slider
          step: 1.0

    use_time:
      name: 'Use timeslot'
      description: 'Check to use the timeslot in the automation (this overrides all other conditions)'
      default: false
      selector:
        boolean:
    time_from:
      name: 'Timeslot from'
      default: "00:00:00"
      selector:
        time:
    time_to:
      name: 'Timeslot to'
      default: "23:59:59"
      selector:
        time:

      
    target_light:
      name: Lights
      description: This is the light (or lights) that will be activated at sunset
      selector:
        target:
          entity:
            domain: light

    target_brightness:
      name: Brightness
      description: Brightness of the light(s) when they're activated
      default: 50
      selector:
        number:
          min: 5.0
          max: 100.0
          mode: slider
          step: 5.0
          unit_of_measurement: '%'

    target_color_temp:
      name: Temperature
      description: Temperature of the light(s) when they're activated
      default: 280
      selector:
        number:
          min: 153
          max: 454
          mode: slider
          step: 1

    no_motion_wait:
      name: Wait time
      description: Time to leave the light on after last motion is detected.
      default: 120
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds
          

# If motion is detected within the delay,
# we restart the script.
mode: restart
max_exceeded: silent

variables:
  target_brightness: !input 'target_brightness'
  target_color_temp: !input 'target_color_temp'
  time_from: !input time_from
  time_to: !input time_to
  
trigger:
  - platform: state
    entity_id: !input motion_entity
    from: "off"
    to: "on"

condition:
  - condition: or
    conditions:
      - condition: template
        value_template: >
          {% if is_state('input_boolean.use_time', 'on') %}
            {{ now().strftime('%H:%M:%S') > states('input_datetime.time_from') and now().strftime('%H:%M:%S') < states('input_datetime.time_to') }}
          {% else %}
            {{ is_state(ilum_entity, 'off') or states(lux_entity) | float < lux_value | float or state_attr('sun.sun', 'elevation') | float < states('input_number.elevation_shift') | float }}
          {% endif %}

action:
  - service: light.turn_on
    target: !input target_light
    data_template:
      brightness_pct: '{{ target_brightness | int }}'
      color_temp: '{{ target_color_temp | int }}'
  - wait_for_trigger:
      platform: state
      entity_id: !input motion_entity
      from: "on"
      to: "off"
  - delay: !input no_motion_wait
  - service: light.turn_off
    target: !input target_light
