blueprint:
  name: Door controlled heater Summer
  description: Raise heater temp to 26 when opening window and bring back with delay
  domain: automation
  source_url: https://github.com/thefunkygibbon/homeassistant/edit/main/smartthermostat2.yaml
  input:
    heating_target:
      name: Heater
      selector:
        entity:
          domain: climate
    door_entity:
      name: Door Sensor
      selector:
        entity: {}
    door_closed_wait:
      name: Wait time open
      description: Time to leave the heating on after door is opened.
      default: 120
      selector:
        number:
          min: 0.0
          max: 3600.0
          unit_of_measurement: seconds
          mode: slider
          step: 1.0
    door_opened_wait:
      name: Wait time closed
      description: Time to leave the heating off after door is closed.
      default: 120
      selector:
        number:
          min: 0.0
          max: 3600.0
          unit_of_measurement: seconds
          mode: slider
          step: 1.0
    target_temp:
      name: Target Temperature
      description: Temperature to set the heater to.
      default: 20
      selector:
        number:
          min: 0.0
          max: 40
          unit_of_measurement: degrees
          mode: slider
          step: 0.1
    default_temp:
      name: Default Temperature
      description: Temperature to set the heater back down to when not in use
      default: 10
      selector:
        number:
          min: 0.0
          max: 40
          unit_of_measurement: degrees
          mode: slider
          step: 0.1 
    start_time:
      name: Start Time
      selector:
        time:
    end_time:
      name: End Time
      selector:
        time:
    run_on_sunday:
      name: Run on Sunday
      selector:
        boolean:
    run_on_monday:
      name: Run on Monday
      selector:
        boolean:
    run_on_tuesday:
      name: Run on Tuesday
      selector:
        boolean:
    run_on_wednesday:
      name: Run on Wednesday
      selector:
        boolean:
    run_on_thursday:
      name: Run on Thursday
      selector:
        boolean:
    run_on_friday:
      name: Run on Friday
      selector:
        boolean:
    run_on_saturday:
      name: Run on Saturday
      selector:
        boolean:
mode: restart
max_exceeded: silent

variables:
  heating_target: !input 'heating_target'
  heating_temperature: '{{ state_attr(heating_target, ''temperature'') }}'
  run_on_sunday: !input run_on_sunday
  run_on_monday: !input run_on_monday
  run_on_tuesday: !input run_on_tuesday
  run_on_wednesday: !input run_on_wednesday
  run_on_thursday: !input run_on_thursday
  run_on_friday: !input run_on_friday
  run_on_saturday: !input run_on_saturday

trigger_variables:
  run_on_sunday: !input run_on_sunday
  run_on_monday: !input run_on_monday
  run_on_tuesday: !input run_on_tuesday
  run_on_wednesday: !input run_on_wednesday
  run_on_thursday: !input run_on_thursday
  run_on_friday: !input run_on_friday
  run_on_saturday: !input run_on_saturday

trigger:
  - platform: time
    at: !input start_time
    id: "start_trigger"
  - platform: time
    at: !input end_time
    id: "end_trigger"

action:
  - choose:
      - conditions:
          # Turn On Time
          - condition: template
            value_template: |-
              {{ ((now().strftime('%A') == 'Sunday') and run_on_sunday) or
              ((now().strftime('%A') == 'Monday') and run_on_monday) or
              ((now().strftime('%A') == 'Tuesday') and run_on_tuesday) or
              ((now().strftime('%A') == 'Wednesday') and run_on_wednesday) or
              ((now().strftime('%A') == 'Thursday') and run_on_thursday) or
              ((now().strftime('%A') == 'Friday') and run_on_friday) or
              ((now().strftime('%A') == 'Saturday') and run_on_saturday) }}
          - condition: trigger
            id: "start_trigger"
      - conditions:
          # Turn Off Time
          - condition: template
            value_template: |-
              {{ ((now().strftime('%A') == 'Sunday') and run_on_sunday) or
              ((now().strftime('%A') == 'Monday') and run_on_monday) or
              ((now().strftime('%A') == 'Tuesday') and run_on_tuesday) or
              ((now().strftime('%A') == 'Wednesday') and run_on_wednesday) or
              ((now().strftime('%A') == 'Thursday') and run_on_thursday) or
              ((now().strftime('%A') == 'Friday') and run_on_friday) or
              ((now().strftime('%A') == 'Saturday') and run_on_saturday) }}
          - condition: trigger
            id: "end_trigger"
  - delay: !input 'door_opened_wait'
  - service: climate.set_temperature
    entity_id: !input 'heating_target'
    data:
      temperature: !input 'default_temp'
  - wait_for_trigger:
      platform: state
      entity_id: !input 'door_entity'
      from: 'on'
      to: 'off'
  - delay: !input 'door_closed_wait'
  - service: climate.set_temperature
    entity_id: !input 'heating_target'
    data:
      temperature: !input 'target_temp'
  - service: climate.set_temperature
    entity_id: !input 'heating_target'
    data:
      temperature: '{{heating_temperature}}'
